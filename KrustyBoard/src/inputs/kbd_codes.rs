
use strum_macros::EnumIter;


/// Enum for all the Keyboard Keys
#[allow(non_camel_case_types)]
#[derive(Debug, Eq, PartialEq, Hash, Copy, Clone, EnumIter)]
pub enum KbdKey {
    MouseLeftBtn,
    MouseRightBtn,
    MouseMiddleBtn,
    MouseX1Btn,
    MouseX2Btn,
    Backspace,
    Tab,
    Enter,
    Shift,
    Ctrl,
    Alt,
    Escape,
    Space,
    PageUp,
    PageDown,
    End,
    Home,
    Left,
    Up,
    Right,
    Down,
    Insert,
    Delete,
    Numrow_0,
    Numrow_1,
    Numrow_2,
    Numrow_3,
    Numrow_4,
    Numrow_5,
    Numrow_6,
    Numrow_7,
    Numrow_8,
    Numrow_9,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    LWin,
    RWin,
    Apps,
    Sleep,
    Numpad_0,
    Numpad_1,
    Numpad_2,
    Numpad_3,
    Numpad_4,
    Numpad_5,
    Numpad_6,
    Numpad_7,
    Numpad_8,
    Numpad_9,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    NumLock,
    ScrollLock,
    CapsLock,
    LShift,
    RShift,
    LCtrl,
    RCtrl,
    LAlt,
    RAlt,
    BrowserBack,
    BrowserForward,
    BrowserRefresh,
    VolumeMute,
    VolumeDown,
    VolumeUp,
    MediaNextTrack,
    MediaPrevTrack,
    MediaStop,
    MediaPlayPause,
    Semicolon,
    Equal,
    Comma,
    Minus,
    Period,
    Slash,
    Backquote,
    LBracket,
    RBracket,
    Backslash,
    Quote,

    // the following are extended keys (with e0 prefixed scan code) .. supposed to work regardless of Shift state
    // todo: these really shouldnt be here, as these are scan-codes, not v-codes .. we gotta split these up

    ExtHome,
    ExtUp,
    ExtPgUp,
    ExtLeft,
    ExtRight,
    ExtEnd,
    ExtDown,
    ExtPgDn,
    ExtInsert,
    ExtDelete,

    #[strum(disabled)]
    OtherKey(u64),
}



impl From<KbdKey> for u64 {
    // https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes?redirectedfrom=MSDN
    fn from(key: KbdKey) -> u64 {
        use self::KbdKey::*;
        match key {
            MouseLeftBtn => 0x01,
            MouseRightBtn => 0x02,
            MouseMiddleBtn => 0x04,
            MouseX1Btn => 0x05,
            MouseX2Btn => 0x06,
            Backspace => 0x08,
            Tab => 0x09,
            Enter => 0x0D,
            Shift => 0x10,
            Ctrl => 0x11,
            Alt => 0x12,
            Escape => 0x1B,
            Space => 0x20,
            PageUp => 0x21,
            PageDown => 0x22,
            End => 0x23,
            Home => 0x24,
            Left => 0x25,
            Up => 0x26,
            Right => 0x27,
            Down => 0x28,
            Insert => 0x2D,
            Delete => 0x2E,
            Numrow_0 => 0x30,
            Numrow_1 => 0x31,
            Numrow_2 => 0x32,
            Numrow_3 => 0x33,
            Numrow_4 => 0x34,
            Numrow_5 => 0x35,
            Numrow_6 => 0x36,
            Numrow_7 => 0x37,
            Numrow_8 => 0x38,
            Numrow_9 => 0x39,
            A => 0x41,
            B => 0x42,
            C => 0x43,
            D => 0x44,
            E => 0x45,
            F => 0x46,
            G => 0x47,
            H => 0x48,
            I => 0x49,
            J => 0x4A,
            K => 0x4B,
            L => 0x4C,
            M => 0x4D,
            N => 0x4E,
            O => 0x4F,
            P => 0x50,
            Q => 0x51,
            R => 0x52,
            S => 0x53,
            T => 0x54,
            U => 0x55,
            V => 0x56,
            W => 0x57,
            X => 0x58,
            Y => 0x59,
            Z => 0x5A,
            LWin => 0x5B,
            RWin => 0x5C,
            Apps => 0x5D,
            Sleep => 0x5F,
            Numpad_0 => 0x60,
            Numpad_1 => 0x61,
            Numpad_2 => 0x62,
            Numpad_3 => 0x63,
            Numpad_4 => 0x64,
            Numpad_5 => 0x65,
            Numpad_6 => 0x66,
            Numpad_7 => 0x67,
            Numpad_8 => 0x68,
            Numpad_9 => 0x69,
            F1 => 0x70,
            F2 => 0x71,
            F3 => 0x72,
            F4 => 0x73,
            F5 => 0x74,
            F6 => 0x75,
            F7 => 0x76,
            F8 => 0x77,
            F9 => 0x78,
            F10 => 0x79,
            F11 => 0x7A,
            F12 => 0x7B,
            F13 => 0x7C,
            F14 => 0x7D,
            F15 => 0x7E,
            F16 => 0x7F,
            F17 => 0x80,
            F18 => 0x81,
            F19 => 0x82,
            F20 => 0x83,
            F21 => 0x84,
            F22 => 0x85,
            F23 => 0x86,
            F24 => 0x87,
            NumLock => 0x90,
            ScrollLock => 0x91,
            CapsLock => 0x14,
            LShift => 0xA0,
            RShift => 0xA1,
            LCtrl => 0xA2,
            RCtrl => 0xA3,
            LAlt => 0xA4,
            RAlt => 0xA5,
            BrowserBack => 0xA6,
            BrowserForward => 0xA7,
            BrowserRefresh => 0xA8,
            VolumeMute => 0xAD,
            VolumeDown => 0xAE,
            VolumeUp => 0xAF,
            MediaNextTrack => 0xB0,
            MediaPrevTrack => 0xB1,
            MediaStop => 0xB2,
            MediaPlayPause => 0xB3,
            Semicolon => 0xBA,
            Equal => 0xBB,
            Comma => 0xBC,
            Minus => 0xBD,
            Period => 0xBE,
            Slash => 0xBF,
            Backquote => 0xC0,
            LBracket => 0xDB,
            Backslash => 0xDC,
            RBracket => 0xDD,
            Quote => 0xDE,

            ExtHome => 0xE047,
            ExtUp => 0xE048,
            ExtPgUp => 0xE049,
            ExtLeft => 0xE04B,
            ExtRight => 0xE04D,
            ExtEnd => 0xE04F,
            ExtDown => 0xE050,
            ExtPgDn => 0xE051,
            ExtInsert => 0xE052,
            ExtDelete => 0xE053,

            //RAlt => 0xE038,
            //RCtrl => 0xE01D,
            //RShift => 0xE036,

            OtherKey(code) => code,
        }
    }
}

impl From<u64> for KbdKey {
    // https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes?redirectedfrom=MSDN
    fn from(code: u64) -> KbdKey {
        use self::KbdKey::*;
        match code {
            0x01 => MouseLeftBtn,
            0x02 => MouseRightBtn,
            0x04 => MouseMiddleBtn,
            0x05 => MouseX1Btn,
            0x06 => MouseX2Btn,
            0x08 => Backspace,
            0x09 => Tab,
            0x0D => Enter,
            0x10 => Shift,
            0x11 => Ctrl,
            0x12 => Alt,
            0x1B => Escape,
            0x20 => Space,
            0x21 => PageUp,
            0x22 => PageDown,
            0x23 => End,
            0x24 => Home,
            0x25 => Left,
            0x26 => Up,
            0x27 => Right,
            0x28 => Down,
            0x2D => Insert,
            0x2E => Delete,
            0x30 => Numrow_0,
            0x31 => Numrow_1,
            0x32 => Numrow_2,
            0x33 => Numrow_3,
            0x34 => Numrow_4,
            0x35 => Numrow_5,
            0x36 => Numrow_6,
            0x37 => Numrow_7,
            0x38 => Numrow_8,
            0x39 => Numrow_9,
            0x41 => A,
            0x42 => B,
            0x43 => C,
            0x44 => D,
            0x45 => E,
            0x46 => F,
            0x47 => G,
            0x48 => H,
            0x49 => I,
            0x4A => J,
            0x4B => K,
            0x4C => L,
            0x4D => M,
            0x4E => N,
            0x4F => O,
            0x50 => P,
            0x51 => Q,
            0x52 => R,
            0x53 => S,
            0x54 => T,
            0x55 => U,
            0x56 => V,
            0x57 => W,
            0x58 => X,
            0x59 => Y,
            0x5A => Z,
            0x5B => LWin,
            0x5C => RWin,
            0x5D => Apps,
            0x5F => Sleep,
            0x60 => Numpad_0,
            0x61 => Numpad_1,
            0x62 => Numpad_2,
            0x63 => Numpad_3,
            0x64 => Numpad_4,
            0x65 => Numpad_5,
            0x66 => Numpad_6,
            0x67 => Numpad_7,
            0x68 => Numpad_8,
            0x69 => Numpad_9,
            0x70 => F1,
            0x71 => F2,
            0x72 => F3,
            0x73 => F4,
            0x74 => F5,
            0x75 => F6,
            0x76 => F7,
            0x77 => F8,
            0x78 => F9,
            0x79 => F10,
            0x7A => F11,
            0x7B => F12,
            0x7C => F13,
            0x7D => F14,
            0x7E => F15,
            0x7F => F16,
            0x80 => F17,
            0x81 => F18,
            0x82 => F19,
            0x83 => F20,
            0x84 => F21,
            0x85 => F22,
            0x86 => F23,
            0x87 => F24,
            0x90 => NumLock,
            0x91 => ScrollLock,
            0x14 => CapsLock,
            0xA0 => LShift,
            0xA1 => RShift,
            0xA2 => LCtrl,
            0xA3 => RCtrl,
            0xA4 => LAlt,
            0xA5 => RAlt,
            0xA6 => BrowserBack,
            0xA7 => BrowserForward,
            0xA8 => BrowserRefresh,
            0xAD => VolumeMute,
            0xAE => VolumeDown,
            0xAF => VolumeUp,
            0xB0 => MediaNextTrack,
            0xB1 => MediaPrevTrack,
            0xB2 => MediaStop,
            0xB3 => MediaPlayPause,
            0xBA => Semicolon,
            0xBB => Equal,
            0xBC => Comma,
            0xBD => Minus,
            0xBE => Period,
            0xBF => Slash,
            0xC0 => Backquote,
            0xDB => LBracket,
            0xDC => Backslash,
            0xDD => RBracket,
            0xDE => Quote,

            0xE047 => ExtHome,
            0xE048 => ExtUp,
            0xE049 => ExtPgUp,
            0xE04B => ExtLeft,
            0xE04D => ExtRight,
            0xE04F => ExtEnd,
            0xE050 => ExtDown,
            0xE051 => ExtPgDn,
            0xE052 => ExtInsert,
            0xE053 => ExtDelete,

            //0xE01D => RCtrl,
            //0xE036 => RShift,
            //0xE038 => RAlt,


            // ugh maybe get scan codes from http://www.philipstorr.id.au/pcbook/book3/scancode.htm ..
            // adn actually make a scandodes + vk table .. ?
            // certainly for left-right ctrl/alt/shift/win those seem more reliable, plus show up in browser key-location in key-events

            _ => OtherKey(code),
        }
    }
}


impl KbdKey {
    pub fn get_char(&self) -> Option<char> {
        use self::KbdKey::*;
        match self {
            A => Some('a'),
            B => Some('b'),
            C => Some('c'),
            D => Some('d'),
            E => Some('e'),
            F => Some('f'),
            G => Some('g'),
            H => Some('h'),
            I => Some('i'),
            J => Some('j'),
            K => Some('k'),
            L => Some('l'),
            M => Some('m'),
            N => Some('n'),
            O => Some('o'),
            P => Some('p'),
            Q => Some('q'),
            R => Some('r'),
            S => Some('s'),
            T => Some('t'),
            U => Some('u'),
            V => Some('v'),
            W => Some('w'),
            X => Some('x'),
            Y => Some('y'),
            Z => Some('z'),
            Numpad_0 => Some('0'),
            Numpad_1 => Some('1'),
            Numpad_2 => Some('2'),
            Numpad_3 => Some('3'),
            Numpad_4 => Some('4'),
            Numpad_5 => Some('5'),
            Numpad_6 => Some('6'),
            Numpad_7 => Some('7'),
            Numpad_8 => Some('8'),
            Numpad_9 => Some('9'),
            Numrow_0 => Some('0'),
            Numrow_1 => Some('1'),
            Numrow_2 => Some('2'),
            Numrow_3 => Some('3'),
            Numrow_4 => Some('4'),
            Numrow_5 => Some('5'),
            Numrow_6 => Some('6'),
            Numrow_7 => Some('7'),
            Numrow_8 => Some('8'),
            Numrow_9 => Some('9'),
            Backslash => Some('\\'),
            Slash => Some('/'),
            Comma => Some(','),
            Period => Some('.'),
            Minus => Some('-'),
            Quote => Some('"'),
            Semicolon => Some(';'),
            LBracket => Some('['),
            RBracket => Some(']'),
            Equal => Some('='),
            _ => None,
        }
    }

    pub fn from_char(c: char) -> Option<KbdKey> {
        use self::KbdKey::*;
        match c {
            ' ' => Some(Space),
            'A' | 'a' => Some(A),
            'B' | 'b' => Some(B),
            'C' | 'c' => Some(C),
            'D' | 'd' => Some(D),
            'E' | 'e' => Some(E),
            'F' | 'f' => Some(F),
            'G' | 'g' => Some(G),
            'H' | 'h' => Some(H),
            'I' | 'i' => Some(I),
            'J' | 'j' => Some(J),
            'K' | 'k' => Some(K),
            'L' | 'l' => Some(L),
            'M' | 'm' => Some(M),
            'N' | 'n' => Some(N),
            'O' | 'o' => Some(O),
            'P' | 'p' => Some(P),
            'Q' | 'q' => Some(Q),
            'R' | 'r' => Some(R),
            'S' | 's' => Some(S),
            'T' | 't' => Some(T),
            'U' | 'u' => Some(U),
            'V' | 'v' => Some(V),
            'W' | 'w' => Some(W),
            'X' | 'x' => Some(X),
            'Y' | 'y' => Some(Y),
            'Z' | 'z' => Some(Z),
            '0' | ')' => Some(Numrow_0),
            '1' | '!' => Some(Numrow_1),
            '2' | '@' => Some(Numrow_2),
            '3' | '#' => Some(Numrow_3),
            '4' | '$' => Some(Numrow_4),
            '5' | '%' => Some(Numrow_5),
            '6' | '^' => Some(Numrow_6),
            '7' | '&' => Some(Numrow_7),
            '8' | '*' => Some(Numrow_8),
            '9' | '(' => Some(Numrow_9),
            '`' | '~' => Some(Backquote),
            '/' | '?' => Some(Slash),
            ',' | '<' => Some(Comma),
            '.' | '>' => Some(Period),
            '-' | '_' => Some(Minus),
            ';' | ':' => Some(Semicolon),
            '[' | '{' => Some(LBracket),
            ']' | '}' => Some(RBracket),
            '=' | '+' => Some(Equal),
            '\\' | '|' => Some(Backslash),
            '\'' | '"' => Some(Quote),
            _ => None,
        }
    }
}


